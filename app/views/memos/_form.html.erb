<%= form_with(model: [current_child, memo], class: "space-y-6", multipart: true) do |f| %>
  <% if memo.errors.any? %>
    <div class="bg-red-50 p-4 rounded-lg">
      <h2 class="text-red-800 font-semibold mb-2">
        <%= pluralize(memo.errors.count, "error") %> prohibited this memo from being saved:
      </h2>
      <ul class="list-disc list-inside text-red-600">
        <% memo.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div>
    <%= f.label :title, "タイトル", class: "block text-sm font-medium text-gray-700" %>
    <%= f.text_field :title, class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" %>
  </div>

  <div>
    <%= f.label :category, "カテゴリ", class: "block text-sm font-medium text-gray-700" %>
    <div class="mt-1 grid grid-cols-3 gap-2">
      <% Memo::CATEGORIES.each do |category| %>
        <div class="relative">
          <%= f.radio_button :category, category, class: "peer sr-only" %>
          <%= f.label "category_#{category}", category, class: "block w-full text-center py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 peer-checked:bg-blue-50 peer-checked:border-blue-500 peer-checked:text-blue-600" %>
        </div>
      <% end %>
    </div>
  </div>

  <div>
    <%= f.label :body, "本文", class: "block text-sm font-medium text-gray-700" %>
    <%= f.text_area :body, rows: 5, class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" %>
  </div>

  <div>
    <%= f.label :images, "画像", class: "block text-sm font-medium text-gray-700" %>
    <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
      <div class="space-y-1 text-center">
        <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
          <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
        <div class="flex text-sm text-gray-600">
          <label for="memo_images" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
            <span>画像をアップロード</span>
            <%= f.file_field :images, multiple: true, class: "sr-only", accept: "image/*", id: "memo_images" %>
          </label>
          <p class="pl-1">またはドラッグ＆ドロップ</p>
        </div>
        <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
      </div>
    </div>
  </div>

  <div id="image-preview" class="grid grid-cols-2 gap-4">
    <% if memo.images.attached? %>
      <% memo.images.each do |image| %>
        <div class="relative">
          <%= image_tag image, class: "w-full h-32 object-cover rounded" %>
          <%= link_to "削除", 
              delete_image_child_memo_path(current_child, memo, image_id: image.id), 
              method: :delete,
              class: "absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded text-sm",
              data: { turbo_method: :delete, turbo_confirm: "この画像を削除しますか？" } %>
        </div>
      <% end %>
    <% end %>
  </div>

  <div class="flex items-center space-x-4">
    <div class="flex items-center">
      <%= check_box_tag :return_to_dashboard, '1', false, class: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" %>
      <%= label_tag :return_to_dashboard, "保存後にダッシュボードに戻る", class: "ml-2 block text-sm text-gray-700" %>
    </div>
  </div>

  <div class="flex justify-end space-x-4">
    <%= link_to "キャンセル", child_memos_path(current_child), class: "px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50" %>
    <%= f.submit "保存", class: "px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600" %>
  </div>
<% end %>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', function() {
    const fileInput = document.getElementById('memo_images');
    const previewContainer = document.getElementById('image-preview');

    fileInput.addEventListener('change', function(e) {
      previewContainer.innerHTML = '';
      
      Array.from(e.target.files).forEach(file => {
        if (file.type.startsWith('image/')) {
          const reader = new FileReader();
          reader.onload = function(e) {
            const div = document.createElement('div');
            div.className = 'relative';
            div.innerHTML = `
              <img src="${e.target.result}" class="w-full h-32 object-cover rounded">
              <button type="button" class="absolute top-2 right-2 bg-red-500 text-white px-2 py-1 rounded text-sm" onclick="this.parentElement.remove()">削除</button>
            `;
            previewContainer.appendChild(div);
          }
          reader.readAsDataURL(file);
        }
      });
    });

    // ドラッグ＆ドロップの処理
    const dropZone = document.querySelector('.border-dashed');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      dropZone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, unhighlight, false);
    });

    function highlight(e) {
      dropZone.classList.add('border-blue-500');
    }

    function unhighlight(e) {
      dropZone.classList.remove('border-blue-500');
    }

    dropZone.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      fileInput.files = files;
      const event = new Event('change');
      fileInput.dispatchEvent(event);
    }
  });
<% end %> 